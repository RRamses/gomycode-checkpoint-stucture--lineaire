/* 
Objectif
À ce point de contrôle, on vous demande d'écrire un algorithme qui répond à la description suivante :

La description:

Étant donné deux ensembles d'éléments, trouvez la somme de tous les éléments distincts de l'ensemble.
En d'autres termes, trouvez la somme de tous les éléments présents dans l'un ou l'autre des ensembles donnés.
Exemple:
Jeu 1 : [3, 1, 7, 9], Jeu 2 : [2, 4, 1, 9, 3]
Sortie : 13 (éléments distincts 4, 7, 2)
Donnez deux solutions à ce problème, en utilisant à chaque fois différents types de structures de données.
Maintenant, étant donné deux ensembles d'entiers, écrivez également deux algorithmes pour imprimer 
la somme des éléments qui se chevauchent dans deux ensembles. 
Les éléments de chaque ensemble sont uniques ou il n'y a pas de doublons dans un ensemble.
Exemple: 

Jeu 1 : [12, 13, 6, 10]
Jeu 2 : [13, 10, 16, 15]
Somme des éléments qui se chevauchent : 46
Explication : Les éléments communs sont 10, 13
Instructions
Problème 1, Solution 1 avec un tableau.
Initialiser somme = 0. Comparez chaque élément de l'ensemble un avec le deuxième ensemble
et si l'élément n'est pas présent, ajoutez cet élément à la somme. 
Faites ensuite l'inverse pour ajouter des éléments du deuxième ensemble. 

Problème 1, Solution 2 avec une table de hachage.
Insérez tous les éléments des deux ensembles avec l'élément comme clé et son nombre (dans les deux tableaux).
Parcourez maintenant la carte construite et additionnez tous les éléments avec count = 1.
Problème 2, mêmes approches avec peu de modifications.

*/


/* comment resoudre cet algo*/
/*

-definir le probleme1: faire le somme de tous les elements differents  de deux esemble d element
definir le probleme 2: faire le somme de tous les elements identique de deux esemble
-les contraintes:

    *solution 1 pour les 2 problemes
        -utilise un tableau pour stoker chaque ensemble d element
        -sommme= valeur qui stocke les element distincts


    -solution 2 pour les 2 problemes:
        -utilise une table de hachage pour stoker chaque ensemble d element
        -additionner les element avec count=1 comme compteur;

-les entrees

    solution 1 probleme 1 et 2:

    tab1:ARRAY_OF_INTEGER[5];
    tab2:ARRAY_OF_INTEGER[5];
    somme:INTEGER;

    solution 2  probleme 1 et 2:

    htab1 : HASH_TABLE<INTEGER,INTEGER>;
    htab2 : HASH_TABLE<INTEGER,INTEGER>;
    count : INTEGER;

-les sorties :

    solution 1
    sommme

    solution 2
    count

*/


probleme 1

ALGORITHM somme_element_distinct
VAR

    tab1:ARRAY_OF_INTEGER[5];
    tab2:ARRAY_OF_INTEGER[5];
    somme:INTEGER;

    /*    */  

    htab1 : HASH_TABLE<INTEGER,INTEGER>;
    htab2 : HASH_TABLE<INTEGER,INTEGER>;
    count : INTEGER;


BEGIN
    
    /* solution 1*/*
    tab1 := {1,2,3,5,7,8}; 
    tab2 := {10,2,6,5,9,8}; /*  1,10,3,6,7  */ 
    somme:=0;

    FOR i FROM 0 TO tab1.lenght-1   DO
        FOR j FROM 0 TO tab2.lenght-1   DO
            IF (tab1[i]<>tab2[j+1]) THEN
                somme:=somme+tab1[i];
            END_IF
        END_FOR
    END_FOR    


        FOR j FROM 0 TO tab2.lenght-1  DO
            FOR i FROM 0 TO tab1.lenght-1 DO
                IF (tab2[j]<>tab1[i+1]) THEN
                    somme:=somme+tab2[j];
                END_IF
            END_FOR
        END_FOR       

        write(somme);

        /* solution2*/

        htab1.insert(1,1);


    FOR i FROM 0 TO htab1.lenght-1   DO
        FOR j FROM 0 TO htab2.lenght-1   DO
            IF (htab1.lookup[i]<>htab2.lookup[j+1]) THEN
                count:=count+htab1.lookup[i];
            END_IF
        END_FOR
    END_FOR   


        FOR j FROM 0 TO htab2.lenght-1  DO
            FOR i FROM 0 TO htab1.lenght-1 DO
                IF (htab2.lookup[j]<>htab1.lookup[i+1]) THEN
                    count:=count+htab2[j];
                END_IF
            END_FOR
        END_FOR      

        write(count);
    
END








probleme 2

ALGORITHM somme_element_identique
VAR

    arr1:ARRAY_OF_INTEGER[5];
    arr2:ARRAY_OF_INTEGER[5];
    som:INTEGER;

    /*    */  

    htab3 : HASH_TABLE<INTEGER,INTEGER>;
    htab4 : HASH_TABLE<INTEGER,INTEGER>;
    coount : INTEGER;


BEGIN


/* solution 1*/
    
    arr1 := {1,2,3,5,7,8}; 
    arr2 := {10,2,6,5,9,8}; /*  2,5,8  */ 
    som:=0;

    FOR i FROM 0 TO arr1.lenght STEP 1  DO
        FOR j FROM 0 TO arr2.lenght STEP 1  DO
            IF (arr1[i]==arr2[j+1]) THEN
                som:=som+arr1[i];
            END_IF
        END_FOR
    END_FOR    


        FOR j FROM 0 TO arr2.lenght1-1  DO
            FOR i FROM 0 TO arr1.lenght-1  DO
                IF (arr2[j]==arr1[i+1]) THEN
                    som:=som+arr2[j];
                END_IF
            END_FOR
        END_FOR       

        write(som);


        /* solution 2*/

        FOR i FROM 0 TO htab3.lenght-1   DO
        FOR j FROM 0 TO htab4.lenght-1   DO
            IF (htab3.lookup[i]<>htab4.lookup[j+1]) THEN
                coount:=coount+htab3.[i];
            END_IF
        END_FOR
    END_FOR    
        
        FOR j FROM 0 TO htab3.lenght-1  DO
            FOR i FROM 0 TO htab4.lenght-1 DO
                IF (htab4.lookup[j] <> htab3.lookup[i+1]) THEN
                    coount:=coount+htab4[j];
                END_IF
            END_FOR
        END_FOR 

        write(coount)
    
END